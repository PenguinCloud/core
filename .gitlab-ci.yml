# PenguinTech

workflow:
  rules:
    - if: $CI_COMMIT_BRANCH
      exists:
        - Dockerfile
stages:
  - pre-test
  - build
  - test
  - cleanup

before_script:
  - docker info
  - docker pull ubuntu:20.04
  - cat ~/.docker/token | docker login --password-stdin -u cicd  $CI_REGISTRY

alpha:
  stage: build
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
  script:
    - docker build -t $CI_PROJECT_NAME .
    - docker image tag  $CI_PROJECT_NAME $CI_REGISTRY_IMAGE:alpha
    - docker push $CI_REGISTRY_IMAGE:alpha
  # Run this job in a branch where a Dockerfile exists && on a scheduled build on main
  rules:
    - if: $CI_COMMIT_BRANCH == "alpha"

beta:
  stage: build
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
  script:
    - docker build -t $CI_PROJECT_NAME .
    - docker image tag  $CI_PROJECT_NAME $CI_REGISTRY_IMAGE:beta
    - docker push $CI_REGISTRY_IMAGE:beta
  # Run this job in a branch where a Dockerfile exists
  rules:
    - if: $CI_COMMIT_BRANCH == "beta"

prod-merge:
  stage: build
  release:
    tag_name: $CI_MERGE_REQUEST_MILESTONE
    description: "A CICD release"
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
  script:
    - docker build -t $CI_PROJECT_NAME .
    - docker image tag  $CI_PROJECT_NAME $CI_REGISTRY_IMAGE:latest
    - docker image tag  $CI_PROJECT_NAME $CI_REGISTRY_IMAGE:stable
    - docker image tag  $CI_PROJECT_NAME $CI_REGISTRY_IMAGE:$CI_MERGE_REQUEST_MILESTONE
    - docker push $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:stable
    - docker push $CI_REGISTRY_IMAGE:$CI_MERGE_REQUEST_MILESTONE
  rules:
    - if: $CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE == "merge_request_event"

prod-sched:
  stage: build
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
  script:
    - docker build -t $CI_PROJECT_NAME .
    - docker image tag  $CI_PROJECT_NAME $CI_REGISTRY_IMAGE:latest
    - docker image tag  $CI_PROJECT_NAME $CI_REGISTRY_IMAGE:stable
    - docker push $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:stable
  # Run this job in a branch where a Dockerfile exists && on a scheduled build on main
  rules:
    - if: $CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE == 'schedule'
lint:hadolint:
  rules:
    - if: $CI_COMMIT_BRANCH == "alpha"
  script: 
    - mkdir -p reports
    - hadolint -f gitlab_codeclimate Dockerfile > reports/hadolint-$(md5sum Dockerfile | cut -d" " -f1).json
  stage: pre-test
  artifacts:
    name: "$CI_JOB_NAME artifacts from $CI_PROJECT_NAME on $CI_COMMIT_REF_SLUG"
    expire_in: 1 day
    when: always
    reports:
      codequality:
        - "reports/*"
    paths:
      - "reports/*"
lint:ansible-linter:
  stage: pre-test
  script: 
    - sudo apt install python3 python3-pip -y
    - pip3 install "ansible-lint"
    - mkdir -p reports
    - ansible-lint -p entrypoint.yml -f codeclimate | tee reports/ansible.json
  artifacts:
    name: "$CI_JOB_NAME artifacts from $CI_PROJECT_NAME on $CI_COMMIT_REF_SLUG"
    expire_in: 1 day
    when: always
    reports:
      codequality:
        - "reports/*"
    paths:
      - "reports/*"
snyk-sectest:
  stage: test
  script:
    - snyk container test $CI_PROJECT_NAME --fail-on upgradable --file reports/snyk.txt
  artifacts:
    name: "$CI_JOB_NAME artifacts from $CI_PROJECT_NAME on $CI_COMMIT_REF_SLUG"
    expire_in: 1 day
    when: always
    reports:
      codequality:
        - "reports/*"
    paths:
      - "reports/*"
grype-vulntest:
  stage: test
  rules:
    - if: $CI_COMMIT_BRANCH == "alpha"
  script:
    - grype $CI_PROJECT_NAME --only-fixed --fail-on medium | tee reports/grype.txt
  artifacts:
    name: "$CI_JOB_NAME artifacts from $CI_PROJECT_NAME on $CI_COMMIT_REF_SLUG"
    expire_in: 1 day
    when: always
    reports:
      codequality:
        - "reports/*"
    paths:
      - "reports/*"
sast:
  stage: test
include:
- template: Security/SAST.gitlab-ci.yml

after_script:
 # - docker image rm $CI_PROJECT_NAME:latest  -f
  - docker image prune -f
  - docker container prune -f