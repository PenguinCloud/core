# PenguinTech
variables:
  RELEASE_VERSION: v4.1.0

workflow:
  rules:
    - if: $CI_COMMIT_BRANCH
      exists:
        - Dockerfile
stages:
  - lint
  - build
  - test
  - cleanup

before_script:
  - docker info
  - docker pull ubuntu:20.04
  - cat ~/.docker/token | docker login --password-stdin -u cicd  $CI_REGISTRY
  - echo "Milestone $RELEASE_VERSION"
  - echo "Image $CI_REGISTRY_IMAGE"
  - echo "Event source $CI_PIPELINE_SOURCE"
  - pip install ansible ansible-lint
  - ansible-lint --version


ansible-lint:
  stage: lint
  script:
    - ansible-lint . --progressive --profile min -f codeclimate | tee reports/ansible-lint-report.json



shell check:
  stage: lint
  before_script:
    - shellcheck --version
  script:
    - shellcheck *.sh  | tee  reports/shellcheck-lint-report.txt


alpha2beta:
  stage: build
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
  script:
    - docker build -t $CI_PROJECT_NAME .
    - docker image tag  $CI_PROJECT_NAME $CI_REGISTRY_IMAGE:beta
    - docker push $CI_REGISTRY_IMAGE:beta
  # Run this job in a branch where a Dockerfile exists && on a scheduled build on main
  rules:
    - if: $CI_COMMIT_BRANCH == "alpha" && $CI_PIPELINE_SOURCE == "merge_request_event"

beta2main:
  stage: build
  release:
    name: "CICD built release $RELEASE_VERSION"
    tag_name: $RELEASE_VERSION
    description: "A CICD release"
    assets:
      links:
        - name: 'Docker Image'
          url: 'https://$CI_REGISTRY_IMAGE:$RELEASE_VERSION'
          link_type: 'image'
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
  script:
    - docker build -t $CI_PROJECT_NAME .
    - docker image tag  $CI_PROJECT_NAME $CI_REGISTRY_IMAGE:latest
    - docker image tag  $CI_PROJECT_NAME $CI_REGISTRY_IMAGE:stable
    - docker image tag  $CI_PROJECT_NAME $CI_REGISTRY_IMAGE:$RELEASE_VERSION
    - docker push $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:stable
    - docker push $CI_REGISTRY_IMAGE:$RELEASE_VERSION

  # Run this job in a branch where a Dockerfile exists
  rules:
    - if: $CI_COMMIT_BRANCH == "beta"

Main:
  stage: build
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
  script:
    - docker build -t $CI_PROJECT_NAME .
    - docker image tag  $CI_PROJECT_NAME $CI_REGISTRY_IMAGE:latest
    - docker image tag  $CI_PROJECT_NAME $CI_REGISTRY_IMAGE:stable
    - docker image tag  $CI_PROJECT_NAME $CI_REGISTRY_IMAGE:$RELEASE_VERSION
    - docker push $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:stable
    - docker push $CI_REGISTRY_IMAGE:$RELEASE_VERSION
  # Run this job in a branch where a Dockerfile exists && on a scheduled build on main
  rules:
    - if: $CI_COMMIT_BRANCH == "main"

after_script:
  - docker image rm $CI_PROJECT_NAME  -f
  - docker image prune -f
  - docker container prune -f



alpha:
  stage: build
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
  script:
    - docker build -t $CI_PROJECT_NAME .
    - docker image tag  $CI_PROJECT_NAME $CI_REGISTRY_IMAGE:alpha
    - docker push $CI_REGISTRY_IMAGE:alpha
  # Run this job in a branch where a Dockerfile exists && on a scheduled build on main
  rules:
    - if: $CI_COMMIT_BRANCH == "alpha"

code_quality:
  artifacts:
    paths:
      - reports/*
      expire_in: 1 week

after_script:
  - docker image rm $CI_PROJECT_NAME  -f
  - docker image prune -f
  - docker container prune -f