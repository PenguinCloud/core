# PenguinTech
variables:
  RELEASE_VERSION: v4.1.1

include:
  - template: Code-Quality.gitlab-ci.yml
  - template: Security/SAST.gitlab-ci.yml
  #- template: Jobs/Secret-Detection.gitlab-ci.yml

variables:
  SCAN_KUBERNETES_MANIFESTS: "false"  

#secret_detection:
#  variables:
#    SECRET_DETECTION_HISTORIC_SCAN: "true"

workflow:
  rules:
    - if: $CI_COMMIT_BRANCH
      exists:
        - Dockerfile
stages:
  - .pre
  - lint
  - build
  - test
  - integration
  - deploy
  - cleanup

prep:
  stage: .pre
  script:
    - docker info
    - docker pull ubuntu:20.04
    - cat ~/.docker/token | docker login --password-stdin -u cicd  $CI_REGISTRY
    - pip install ansible ansible-lint
    - echo "Milestone $RELEASE_VERSION"
    - echo "Image $CI_REGISTRY_IMAGE"
    - echo "Event source $CI_PIPELINE_SOURCE"
    - echo "Report directory /tmp/$CI_COMMIT_SHA/reports"
    - mkdir -p /tmp/$CI_COMMIT_SHA/reports

basic-code-check:
  stage: lint
  rules:
    - if: $CI_COMMIT_BRANCH == "alpha"
  before_script:
    - shfmt -mn -l -w entrypoint.sh  
  script:
    - shellcheck *.sh  | tee  /tmp/$CI_COMMIT_SHA/reports/shellcheck-lint-report.txt
    - ansible-lint . --exclude .gitlab-ci.yml -x expirimental --profile basic -f codeclimate | tee /tmp/$CI_COMMIT_SHA/reports/ansible-lint-report.json
  artifacts:
    reports:
      cyclonedx:
        - /tmp/$CI_COMMIT_SHA/reports/ptg-standard-sbom.json
    paths:
      - /tmp/$CI_COMMIT_SHA/reports/*
    expire_in: 1 week
    
prod-code-check:
  stage: lint
  rules:
    - if: $CI_COMMIT_BRANCH == "beta"
  before_script:
    - shfmt -i 2 -ci -mn  -d  entrypoint.sh  
  script:
    - shellcheck *.sh  | tee  /tmp/$CI_COMMIT_SHA/reports/shellcheck-lint-report.txt
    - ansible-lint . --exclude .gitlab-ci.yml -x expirimental --profile safety -f codeclimate | tee /tmp/$CI_COMMIT_SHA/reports/ansible-lint-report.json

alpha2beta:
  stage: build
  artifacts:
    reports:
      cyclonedx:
        - /tmp/$CI_COMMIT_SHA/reports/ptg-standard-sbom.json
    paths:
      - /tmp/$CI_COMMIT_SHA/reports/*
    expire_in: 1 week
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
  script:
    - docker build -t $CI_PROJECT_NAME .
    - docker image tag  $CI_PROJECT_NAME $CI_REGISTRY_IMAGE:beta
    - docker push $CI_REGISTRY_IMAGE:beta
  # Run this job in a branch where a Dockerfile exists && on a scheduled build on main
  rules:
    - if: $CI_COMMIT_BRANCH == "alpha" && $CI_PIPELINE_SOURCE == "merge_request_event"

beta2main:
  stage: build
  release:
    name: "CICD built release $RELEASE_VERSION"
    tag_name: $RELEASE_VERSION
    description: "A CICD release"
    assets:
      links:
        - name: 'Docker Image'
          url: 'https://$CI_REGISTRY_IMAGE:$RELEASE_VERSION'
          link_type: 'image'
  artifacts:
    reports:
      cyclonedx:
        - /tmp/$CI_COMMIT_SHA/reports/ptg-standard-sbom.json
    paths:
      - /tmp/$CI_COMMIT_SHA/reports/*
    expire_in: 1 week
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
  script:
    - docker build -t $CI_PROJECT_NAME .
    - docker image tag  $CI_PROJECT_NAME $CI_REGISTRY_IMAGE:latest
    - docker image tag  $CI_PROJECT_NAME $CI_REGISTRY_IMAGE:stable
    - docker image tag  $CI_PROJECT_NAME $CI_REGISTRY_IMAGE:$RELEASE_VERSION
    - docker push $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:stable
    - docker push $CI_REGISTRY_IMAGE:$RELEASE_VERSION
  # Run this job in a branch where a Dockerfile exists
  rules:
    - if: $CI_COMMIT_BRANCH == "beta"

Main:
  stage: build
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
  artifacts:
    reports:
      cyclonedx:
        - /tmp/$CI_COMMIT_SHA/reports/ptg-standard-sbom.json
    paths:
      - /tmp/$CI_COMMIT_SHA/reports/*
    expire_in: 1 week
  script:
    - docker build -t $CI_PROJECT_NAME .
    - docker image tag  $CI_PROJECT_NAME $CI_REGISTRY_IMAGE:latest
    - docker image tag  $CI_PROJECT_NAME $CI_REGISTRY_IMAGE:stable
    - docker image tag  $CI_PROJECT_NAME $CI_REGISTRY_IMAGE:$RELEASE_VERSION
    - docker push $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:stable
    - docker push $CI_REGISTRY_IMAGE:$RELEASE_VERSION
  # Run this job in a branch where a Dockerfile exists && on a scheduled build on main
  rules:
    - if: $CI_COMMIT_BRANCH == "main"

alpha:
  stage: build
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
  script:
    - docker build -t $CI_PROJECT_NAME .
    - docker image tag  $CI_PROJECT_NAME $CI_REGISTRY_IMAGE:alpha
    - docker push $CI_REGISTRY_IMAGE:alpha
  artifacts:
    reports:
      cyclonedx:
        - /tmp/$CI_COMMIT_SHA/reports/ptg-standard-sbom.json
    paths:
      - /tmp/$CI_COMMIT_SHA/reports/*
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_BRANCH == "alpha"

code_quality:
  artifacts:
    paths: 
      - gl-code-quality-report.json
      - /tmp/$CI_COMMIT_SHA/reports/ansible-lint-report.json
    expire_in: 1 month
  
runner-postrun:
  stage: cleanup
  script:
    - docker image rm $CI_PROJECT_NAME  -f
    - docker image prune -f
    - docker container prune -f
    - rm -rf /tmp/$CI_COMMIT_SHA/reports
