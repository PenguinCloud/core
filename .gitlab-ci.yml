# PenguinTech
variables:
  RELEASE_VERSION: v2.2.0

workflow:
  rules:
    - if: $CI_COMMIT_BRANCH
      exists:
        - Dockerfile
stages:
  - pre-test
  - build
  - test
  - cleanup

before_script:
  - docker info
  - docker pull ubuntu:20.04
  - cat ~/.docker/token | docker login --password-stdin -u cicd  $CI_REGISTRY
  - echo "Milestone $RELEASE_VERSION"
  - echo "Image $CI_REGISTRY_IMAGE"
  - echo "Event source $CI_PIPELINE_SOURCE"

alpha:
  stage: build
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
  script:
    - docker build -t $CI_PROJECT_NAME .
    - docker image tag  $CI_PROJECT_NAME $CI_REGISTRY_IMAGE:alpha
    - docker push $CI_REGISTRY_IMAGE:alpha
  # Run this job in a branch where a Dockerfile exists && on a scheduled build on main
  rules:
    - if: $CI_COMMIT_BRANCH == "alpha"

beta:
  stage: build
  release:
    name: "CICD built release $RELEASE_VERSION"
    tag_name: $RELEASE_VERSION
    description: "A CICD release"
    assets:
      links:
        - name: 'Docker Image'
          url: 'https://$CI_REGISTRY_IMAGE:$RELEASE_VERSION'
          link_type: 'image'
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
  script:
    - docker build -t $CI_PROJECT_NAME .
    - docker image tag  $CI_PROJECT_NAME $CI_REGISTRY_IMAGE:latest
    - docker image tag  $CI_PROJECT_NAME $CI_REGISTRY_IMAGE:stable
    - docker image tag  $CI_PROJECT_NAME $CI_REGISTRY_IMAGE:$RELEASE_VERSION
    - docker push $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:stable
    - docker push $CI_REGISTRY_IMAGE:$RELEASE_VERSION

  # Run this job in a branch where a Dockerfile exists
  rules:
    - if: $CI_COMMIT_BRANCH == "beta"

prod-merge:
  stage: build
  release:
    tag_name: $CI_MERGE_REQUEST_MILESTONE
    description: "A CICD release"
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
  script:
    - docker build -t $CI_PROJECT_NAME .
    - docker image tag  $CI_PROJECT_NAME $CI_REGISTRY_IMAGE:latest
    - docker image tag  $CI_PROJECT_NAME $CI_REGISTRY_IMAGE:stable
    - docker image tag  $CI_PROJECT_NAME $CI_REGISTRY_IMAGE:$CI_MERGE_REQUEST_MILESTONE
    - docker push $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:stable
    - docker push $CI_REGISTRY_IMAGE:$CI_MERGE_REQUEST_MILESTONE
  rules:
    - if: $CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE == "merge_request_event"

prod-sched:
  stage: build
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
  script:
    - docker build -t $CI_PROJECT_NAME .
    - docker image tag  $CI_PROJECT_NAME $CI_REGISTRY_IMAGE:alpha
    - docker push $CI_REGISTRY_IMAGE:alpha
  # Run this job in a branch where a Dockerfile exists && on a scheduled build on main
  rules:
    - if: $CI_COMMIT_BRANCH == "alpha"


after_script:
 # - docker image rm $CI_PROJECT_NAME:latest  -f
  - docker image prune -f
  - docker container prune -f