# PenguinTech

workflow:
  rules:
    - if: $CI_COMMIT_BRANCH
      exists:
        - Dockerfile
stages:
  - build
  - test
  - cleanup

before_script:
  - docker info
  - docker pull ubuntu:20.04
  - cat ~/.docker/token | docker login --password-stdin -u cicd  $CI_REGISTRY 
  - echo "Milestone $CI_MERGE_REQUEST_MILESTONE"

alpha2beta:
  stage: build
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
  script:
    - docker build -t $CI_PROJECT_NAME .
    - docker image tag  $CI_PROJECT_NAME $CI_REGISTRY_IMAGE:beta
    - docker push $CI_REGISTRY_IMAGE:beta
  # Run this job in a branch where a Dockerfile exists && on a scheduled build on main
  rules:
    - if: $CI_COMMIT_BRANCH == "alpha" && $CI_PIPELINE_SOURCE == 'merge_request_event'

beta2main:
  stage: build
  release:
    name: "CICD built release $CI_MERGE_REQUEST_MILESTONE"
    tag_name: $CI_MERGE_REQUEST_MILESTONE
    description: "A CICD release"
    assets:
      links:
        - name: 'Docker Image'
          url: '$CI_PROJECT_NAME $CI_REGISTRY_IMAGE:$CI_MERGE_REQUEST_MILESTONE'
          link_type: 'image' 
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
  script:
    - docker build -t $CI_PROJECT_NAME .
    - docker image tag  $CI_PROJECT_NAME $CI_REGISTRY_IMAGE:latest
    - docker image tag  $CI_PROJECT_NAME $CI_REGISTRY_IMAGE:stable
    - docker image tag  $CI_PROJECT_NAME $CI_REGISTRY_IMAGE:$CI_MERGE_REQUEST_MILESTONE
    - docker push $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:stable
    - docker push $CI_REGISTRY_IMAGE:$CI_MERGE_REQUEST_MILESTONE
    - docker push $CI_REGISTRY_IMAGE:beta
  # Run this job in a branch where a Dockerfile exists
  rules:
    - if: $CI_COMMIT_BRANCH == "beta"

prod-sched:
  stage: build
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
  script:
    - docker build -t $CI_PROJECT_NAME .
    - docker image tag  $CI_PROJECT_NAME $CI_REGISTRY_IMAGE:latest
    - docker image tag  $CI_PROJECT_NAME $CI_REGISTRY_IMAGE:stable
    - docker push $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:stable
  # Run this job in a branch where a Dockerfile exists && on a scheduled build on main
  rules:
    - if: $CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE == 'schedule'

after_script:
  - docker image rm $CI_PROJECT_NAME  -f
  - docker image prune -f
  - docker container prune -f



alpha-dev:
  stage: build
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
  script:
    - docker build -t $CI_PROJECT_NAME .
    - docker image tag  $CI_PROJECT_NAME $CI_REGISTRY_IMAGE:alpha
  # Run this job in a branch where a Dockerfile exists && on a scheduled build on main
  rules:
    - if: $CI_COMMIT_BRANCH == "alpha" 
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: never

after_script:
  - docker image rm $CI_PROJECT_NAME  -f
  - docker image prune -f
  - docker container prune -f
